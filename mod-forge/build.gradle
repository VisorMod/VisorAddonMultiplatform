plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}
loom {
    accessWidenerPath = project(":mod-core").file("src/main/resources/mod.accesswidener")

    forge {
        mixinConfig "mod.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    bundle {
        // bundle command, to copy jar contents with the shadow plugin
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

version = version+"-forge"

dependencies {
    shadowCommon(project(path: ":mod-core", configuration: "transformProductionForge")) { transitive = false }
    common(project(path: ":mod-core", configuration: "namedElements")) { transitive false }


    //
    String forgeVersion = "${libs.versions.minecraftVersion.get()}-${libs.versions.forgeVersion.get()}"

    forge "net.minecraftforge:forge:$forgeVersion"

    //mixin extras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${libs.versions.mixinExtras.get()}"))
    compileOnly(project(path: ':mod-core', configuration: 'namedElements'))

}

processResources {
    inputs.property "version", parent.version

    filesMatching("META-INF/mods.toml") {
        expand "version": parent.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    exclude "org.joml"
    exclude "org.lwjgl"
    exclude "org.slf4j"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    configurations = [
            project.configurations.shadowCommon,
            project.configurations.bundle
    ]
    archiveClassifier.set("dev-shadow")


}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set('')
}

sourcesJar {
    def commonSources = project(":mod-core").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}


components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
